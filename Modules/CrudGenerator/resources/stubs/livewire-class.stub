<?php

namespace Modules\{{module}}\Livewire\{{name}};

use Livewire\Component;
use Livewire\WithPagination;
use Illuminate\Support\Str;
use Modules\{{module}}\Entities\{{name}};

class {{name}}Index extends Component
{
    use WithPagination;

    public $perPage = 10;
    public $mostrarFormulario = false;

    // Atributos del formulario
    public $form = [];

    // Puedes personalizar quÃ© campo mostrar de las relaciones
    protected array $relationFields = [
        // 'relacion_id' => 'campo', // Ejemplo: 'user_id' => 'nombre_completo'
    ];

    protected $rules = [
        // 'form.campo' => 'required|string|max:255', // Reemplazar por reglas reales
    ];

    public function toggleFormulario()
    {
        $this->mostrarFormulario = !$this->mostrarFormulario;
        if (!$this->mostrarFormulario) {
            $this->reset('form');
        }
    }

    public function store()
    {
        $this->validate();

        {{name}}::create($this->form);

        $this->reset('form', 'mostrarFormulario');

        $this->dispatch('mostrar-mensaje', tipo: 'success', mensaje: '{{name}} creado correctamente.');
    }

    public function delete($id)
    {
        $item = {{name}}::findOrFail($id);
        $item->delete();

        $this->dispatch('mostrar-mensaje', tipo: 'success', mensaje: '{{name}} eliminado correctamente.');
    }

    protected function getColumnValue($item, $column)
    {
        if (Str::endsWith($column, '_id')) {
            $relation = Str::before($column, '_id');
            $field = $this->relationFields[$column] ?? 'nombre';
            return optional($item->$relation)->$field ?? '-';
        }

        return $item->$column;
    }

    public function render()
    {
        $items = {{name}}::with($this->getRelationNames())->paginate($this->perPage);
        $columns = (new {{name}}())->getFillable();

        return view('{{moduleLower}}::livewire.{{nameLower}}.{{nameLower}}-index', [
            'items' => $items,
            'columns' => $columns,
        ]);
    }

    protected function getRelationNames()
    {
        return array_map(fn($col) => Str::before($col, '_id'), array_filter((new {{name}}())->getFillable(), fn($col) => Str::endsWith($col, '_id')));
    }
}
